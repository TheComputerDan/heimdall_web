// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.11.4
// source: docker_service.proto

package dockerService

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ContainersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContainersRequest) Reset() {
	*x = ContainersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainersRequest) ProtoMessage() {}

func (x *ContainersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainersRequest.ProtoReflect.Descriptor instead.
func (*ContainersRequest) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{0}
}

type EndpointIPAMConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPv4Address  string   `protobuf:"bytes,1,opt,name=IPv4Address,proto3" json:"IPv4Address,omitempty"`
	IPv6Address  string   `protobuf:"bytes,2,opt,name=IPv6Address,proto3" json:"IPv6Address,omitempty"`
	LinkLocalIPs []string `protobuf:"bytes,3,rep,name=LinkLocalIPs,proto3" json:"LinkLocalIPs,omitempty"`
}

func (x *EndpointIPAMConfig) Reset() {
	*x = EndpointIPAMConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointIPAMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointIPAMConfig) ProtoMessage() {}

func (x *EndpointIPAMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointIPAMConfig.ProtoReflect.Descriptor instead.
func (*EndpointIPAMConfig) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{1}
}

func (x *EndpointIPAMConfig) GetIPv4Address() string {
	if x != nil {
		return x.IPv4Address
	}
	return ""
}

func (x *EndpointIPAMConfig) GetIPv6Address() string {
	if x != nil {
		return x.IPv6Address
	}
	return ""
}

func (x *EndpointIPAMConfig) GetLinkLocalIPs() []string {
	if x != nil {
		return x.LinkLocalIPs
	}
	return nil
}

type EndpointSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAMConfig *EndpointIPAMConfig `protobuf:"bytes,1,opt,name=IPAMConfig,proto3" json:"IPAMConfig,omitempty"`
	Links      []string            `protobuf:"bytes,2,rep,name=Links,proto3" json:"Links,omitempty"`
	Aliases    []string            `protobuf:"bytes,3,rep,name=Aliases,proto3" json:"Aliases,omitempty"`
	// Operational data
	NetworkID           string            `protobuf:"bytes,4,opt,name=NetworkID,proto3" json:"NetworkID,omitempty"`
	EndpointID          string            `protobuf:"bytes,5,opt,name=EndpointID,proto3" json:"EndpointID,omitempty"`
	Gateway             string            `protobuf:"bytes,6,opt,name=Gateway,proto3" json:"Gateway,omitempty"`
	IPAddress           string            `protobuf:"bytes,7,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	IPPrefixLen         int64             `protobuf:"varint,8,opt,name=IPPrefixLen,proto3" json:"IPPrefixLen,omitempty"`
	IPv6Gateway         string            `protobuf:"bytes,9,opt,name=IPv6Gateway,proto3" json:"IPv6Gateway,omitempty"`
	GlobalIPv6Address   string            `protobuf:"bytes,10,opt,name=GlobalIPv6Address,proto3" json:"GlobalIPv6Address,omitempty"`
	GlobalIPv6PrefixLen int64             `protobuf:"varint,11,opt,name=GlobalIPv6PrefixLen,proto3" json:"GlobalIPv6PrefixLen,omitempty"`
	MacAddress          string            `protobuf:"bytes,12,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	DriverOpts          map[string]string `protobuf:"bytes,13,rep,name=DriverOpts,proto3" json:"DriverOpts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EndpointSettings) Reset() {
	*x = EndpointSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointSettings) ProtoMessage() {}

func (x *EndpointSettings) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointSettings.ProtoReflect.Descriptor instead.
func (*EndpointSettings) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{2}
}

func (x *EndpointSettings) GetIPAMConfig() *EndpointIPAMConfig {
	if x != nil {
		return x.IPAMConfig
	}
	return nil
}

func (x *EndpointSettings) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *EndpointSettings) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *EndpointSettings) GetNetworkID() string {
	if x != nil {
		return x.NetworkID
	}
	return ""
}

func (x *EndpointSettings) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *EndpointSettings) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *EndpointSettings) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *EndpointSettings) GetIPPrefixLen() int64 {
	if x != nil {
		return x.IPPrefixLen
	}
	return 0
}

func (x *EndpointSettings) GetIPv6Gateway() string {
	if x != nil {
		return x.IPv6Gateway
	}
	return ""
}

func (x *EndpointSettings) GetGlobalIPv6Address() string {
	if x != nil {
		return x.GlobalIPv6Address
	}
	return ""
}

func (x *EndpointSettings) GetGlobalIPv6PrefixLen() int64 {
	if x != nil {
		return x.GlobalIPv6PrefixLen
	}
	return 0
}

func (x *EndpointSettings) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EndpointSettings) GetDriverOpts() map[string]string {
	if x != nil {
		return x.DriverOpts
	}
	return nil
}

type SummaryNetworkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks map[string]*EndpointSettings `protobuf:"bytes,1,rep,name=Networks,proto3" json:"Networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SummaryNetworkSettings) Reset() {
	*x = SummaryNetworkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryNetworkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryNetworkSettings) ProtoMessage() {}

func (x *SummaryNetworkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryNetworkSettings.ProtoReflect.Descriptor instead.
func (*SummaryNetworkSettings) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{3}
}

func (x *SummaryNetworkSettings) GetNetworks() map[string]*EndpointSettings {
	if x != nil {
		return x.Networks
	}
	return nil
}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IP          string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	PrivatePort uint32 `protobuf:"varint,2,opt,name=PrivatePort,proto3" json:"PrivatePort,omitempty"`
	PublicPort  uint32 `protobuf:"varint,3,opt,name=PublicPort,proto3" json:"PublicPort,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{4}
}

func (x *Port) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Port) GetPrivatePort() uint32 {
	if x != nil {
		return x.PrivatePort
	}
	return 0
}

func (x *Port) GetPublicPort() uint32 {
	if x != nil {
		return x.PublicPort
	}
	return 0
}

func (x *Port) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type MountPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Source      string `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	Destination string `protobuf:"bytes,4,opt,name=Destination,proto3" json:"Destination,omitempty"`
	Driver      string `protobuf:"bytes,5,opt,name=Driver,proto3" json:"Driver,omitempty"`
	Mode        string `protobuf:"bytes,6,opt,name=Mode,proto3" json:"Mode,omitempty"`
	RW          bool   `protobuf:"varint,7,opt,name=RW,proto3" json:"RW,omitempty"`
	Propagation string `protobuf:"bytes,8,opt,name=Propagation,proto3" json:"Propagation,omitempty"`
}

func (x *MountPoint) Reset() {
	*x = MountPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPoint) ProtoMessage() {}

func (x *MountPoint) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPoint.ProtoReflect.Descriptor instead.
func (*MountPoint) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{5}
}

func (x *MountPoint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MountPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MountPoint) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MountPoint) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *MountPoint) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *MountPoint) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *MountPoint) GetRW() bool {
	if x != nil {
		return x.RW
	}
	return false
}

func (x *MountPoint) GetPropagation() string {
	if x != nil {
		return x.Propagation
	}
	return ""
}

type ContainersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Names       []string          `protobuf:"bytes,2,rep,name=Names,proto3" json:"Names,omitempty"`
	Image       string            `protobuf:"bytes,3,opt,name=Image,proto3" json:"Image,omitempty"`
	ImageID     string            `protobuf:"bytes,4,opt,name=ImageID,proto3" json:"ImageID,omitempty"`
	Command     string            `protobuf:"bytes,5,opt,name=Command,proto3" json:"Command,omitempty"`
	Created     int64             `protobuf:"varint,6,opt,name=Created,proto3" json:"Created,omitempty"`
	Ports       []*Port           `protobuf:"bytes,7,rep,name=Ports,proto3" json:"Ports,omitempty"`
	SizeRw      int64             `protobuf:"varint,8,opt,name=SizeRw,proto3" json:"SizeRw,omitempty"`
	SizeRootFs  int64             `protobuf:"varint,9,opt,name=SizeRootFs,proto3" json:"SizeRootFs,omitempty"`
	Labels      map[string]string `protobuf:"bytes,10,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State       string            `protobuf:"bytes,11,opt,name=State,proto3" json:"State,omitempty"`
	Status      string            `protobuf:"bytes,12,opt,name=Status,proto3" json:"Status,omitempty"`
	NetworkMode string            `protobuf:"bytes,13,opt,name=NetworkMode,proto3" json:"NetworkMode,omitempty"`
	//     HostConfig    struct {
	//         NetworkMode string `json:",omitempty"`
	//     }
	NetworkSettings *SummaryNetworkSettings `protobuf:"bytes,14,opt,name=NetworkSettings,proto3" json:"NetworkSettings,omitempty"`
	Mounts          []*MountPoint           `protobuf:"bytes,15,rep,name=Mounts,proto3" json:"Mounts,omitempty"`
}

func (x *ContainersResponse) Reset() {
	*x = ContainersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainersResponse) ProtoMessage() {}

func (x *ContainersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainersResponse.ProtoReflect.Descriptor instead.
func (*ContainersResponse) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{6}
}

func (x *ContainersResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ContainersResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ContainersResponse) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ContainersResponse) GetImageID() string {
	if x != nil {
		return x.ImageID
	}
	return ""
}

func (x *ContainersResponse) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ContainersResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ContainersResponse) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ContainersResponse) GetSizeRw() int64 {
	if x != nil {
		return x.SizeRw
	}
	return 0
}

func (x *ContainersResponse) GetSizeRootFs() int64 {
	if x != nil {
		return x.SizeRootFs
	}
	return 0
}

func (x *ContainersResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContainersResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ContainersResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ContainersResponse) GetNetworkMode() string {
	if x != nil {
		return x.NetworkMode
	}
	return ""
}

func (x *ContainersResponse) GetNetworkSettings() *SummaryNetworkSettings {
	if x != nil {
		return x.NetworkSettings
	}
	return nil
}

func (x *ContainersResponse) GetMounts() []*MountPoint {
	if x != nil {
		return x.Mounts
	}
	return nil
}

type ImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImagesRequest) Reset() {
	*x = ImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesRequest) ProtoMessage() {}

func (x *ImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesRequest.ProtoReflect.Descriptor instead.
func (*ImagesRequest) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{7}
}

type ImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers  int64             `protobuf:"varint,1,opt,name=Containers,proto3" json:"Containers,omitempty"`
	Created     int64             `protobuf:"varint,2,opt,name=Created,proto3" json:"Created,omitempty"`
	ID          string            `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	Labels      map[string]string `protobuf:"bytes,4,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ParentID    string            `protobuf:"bytes,5,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	RepoDigests []string          `protobuf:"bytes,6,rep,name=RepoDigests,proto3" json:"RepoDigests,omitempty"`
	RepoTags    []string          `protobuf:"bytes,7,rep,name=RepoTags,proto3" json:"RepoTags,omitempty"`
	SharedSize  int64             `protobuf:"varint,8,opt,name=SharedSize,proto3" json:"SharedSize,omitempty"`
	Size        int64             `protobuf:"varint,9,opt,name=Size,proto3" json:"Size,omitempty"`
	VirtualSize int64             `protobuf:"varint,10,opt,name=VirtualSize,proto3" json:"VirtualSize,omitempty"`
}

func (x *ImagesResponse) Reset() {
	*x = ImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagesResponse) ProtoMessage() {}

func (x *ImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagesResponse.ProtoReflect.Descriptor instead.
func (*ImagesResponse) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{8}
}

func (x *ImagesResponse) GetContainers() int64 {
	if x != nil {
		return x.Containers
	}
	return 0
}

func (x *ImagesResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ImagesResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ImagesResponse) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ImagesResponse) GetParentID() string {
	if x != nil {
		return x.ParentID
	}
	return ""
}

func (x *ImagesResponse) GetRepoDigests() []string {
	if x != nil {
		return x.RepoDigests
	}
	return nil
}

func (x *ImagesResponse) GetRepoTags() []string {
	if x != nil {
		return x.RepoTags
	}
	return nil
}

func (x *ImagesResponse) GetSharedSize() int64 {
	if x != nil {
		return x.SharedSize
	}
	return 0
}

func (x *ImagesResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ImagesResponse) GetVirtualSize() int64 {
	if x != nil {
		return x.VirtualSize
	}
	return 0
}

type HostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HostRequest) Reset() {
	*x = HostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRequest) ProtoMessage() {}

func (x *HostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRequest.ProtoReflect.Descriptor instead.
func (*HostRequest) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{9}
}

type HostResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4     string `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6     string `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	OsType   string `protobuf:"bytes,4,opt,name=osType,proto3" json:"osType,omitempty"`
}

func (x *HostResponse) Reset() {
	*x = HostResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_docker_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostResponse) ProtoMessage() {}

func (x *HostResponse) ProtoReflect() protoreflect.Message {
	mi := &file_docker_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostResponse.ProtoReflect.Descriptor instead.
func (*HostResponse) Descriptor() ([]byte, []int) {
	return file_docker_service_proto_rawDescGZIP(), []int{10}
}

func (x *HostResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostResponse) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *HostResponse) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *HostResponse) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

var File_docker_service_proto protoreflect.FileDescriptor

var file_docker_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x12, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x50, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x6e, 0x6b,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x50, 0x73, 0x22, 0xcf, 0x04, 0x0a, 0x10, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a,
	0x0a, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x49, 0x50, 0x41, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x50, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x50, 0x76, 0x36,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49,
	0x50, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x49, 0x50, 0x76, 0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x50, 0x76,
	0x36, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x5c, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x6c, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x52, 0x57, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x52, 0x57, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd7, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x46, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x69, 0x7a, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x46, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0f, 0x0a, 0x0d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x03, 0x0a,
	0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x52,
	0x65, 0x70, 0x6f, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x70, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65,
	0x70, 0x6f, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0d, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6a, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x32, 0xec, 0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1c, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x3f, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_docker_service_proto_rawDescOnce sync.Once
	file_docker_service_proto_rawDescData = file_docker_service_proto_rawDesc
)

func file_docker_service_proto_rawDescGZIP() []byte {
	file_docker_service_proto_rawDescOnce.Do(func() {
		file_docker_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_docker_service_proto_rawDescData)
	})
	return file_docker_service_proto_rawDescData
}

var file_docker_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_docker_service_proto_goTypes = []interface{}{
	(*ContainersRequest)(nil),      // 0: dockerService.ContainersRequest
	(*EndpointIPAMConfig)(nil),     // 1: dockerService.EndpointIPAMConfig
	(*EndpointSettings)(nil),       // 2: dockerService.EndpointSettings
	(*SummaryNetworkSettings)(nil), // 3: dockerService.SummaryNetworkSettings
	(*Port)(nil),                   // 4: dockerService.Port
	(*MountPoint)(nil),             // 5: dockerService.MountPoint
	(*ContainersResponse)(nil),     // 6: dockerService.ContainersResponse
	(*ImagesRequest)(nil),          // 7: dockerService.ImagesRequest
	(*ImagesResponse)(nil),         // 8: dockerService.ImagesResponse
	(*HostRequest)(nil),            // 9: dockerService.HostRequest
	(*HostResponse)(nil),           // 10: dockerService.HostResponse
	nil,                            // 11: dockerService.EndpointSettings.DriverOptsEntry
	nil,                            // 12: dockerService.SummaryNetworkSettings.NetworksEntry
	nil,                            // 13: dockerService.ContainersResponse.LabelsEntry
	nil,                            // 14: dockerService.ImagesResponse.LabelsEntry
}
var file_docker_service_proto_depIdxs = []int32{
	1,  // 0: dockerService.EndpointSettings.IPAMConfig:type_name -> dockerService.EndpointIPAMConfig
	11, // 1: dockerService.EndpointSettings.DriverOpts:type_name -> dockerService.EndpointSettings.DriverOptsEntry
	12, // 2: dockerService.SummaryNetworkSettings.Networks:type_name -> dockerService.SummaryNetworkSettings.NetworksEntry
	4,  // 3: dockerService.ContainersResponse.Ports:type_name -> dockerService.Port
	13, // 4: dockerService.ContainersResponse.Labels:type_name -> dockerService.ContainersResponse.LabelsEntry
	3,  // 5: dockerService.ContainersResponse.NetworkSettings:type_name -> dockerService.SummaryNetworkSettings
	5,  // 6: dockerService.ContainersResponse.Mounts:type_name -> dockerService.MountPoint
	14, // 7: dockerService.ImagesResponse.Labels:type_name -> dockerService.ImagesResponse.LabelsEntry
	2,  // 8: dockerService.SummaryNetworkSettings.NetworksEntry.value:type_name -> dockerService.EndpointSettings
	0,  // 9: dockerService.DockerAgent.Containers:input_type -> dockerService.ContainersRequest
	7,  // 10: dockerService.DockerAgent.Images:input_type -> dockerService.ImagesRequest
	9,  // 11: dockerService.DockerAgent.Host:input_type -> dockerService.HostRequest
	6,  // 12: dockerService.DockerAgent.Containers:output_type -> dockerService.ContainersResponse
	8,  // 13: dockerService.DockerAgent.Images:output_type -> dockerService.ImagesResponse
	10, // 14: dockerService.DockerAgent.Host:output_type -> dockerService.HostResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_docker_service_proto_init() }
func file_docker_service_proto_init() {
	if File_docker_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_docker_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointIPAMConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SummaryNetworkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_docker_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_docker_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_docker_service_proto_goTypes,
		DependencyIndexes: file_docker_service_proto_depIdxs,
		MessageInfos:      file_docker_service_proto_msgTypes,
	}.Build()
	File_docker_service_proto = out.File
	file_docker_service_proto_rawDesc = nil
	file_docker_service_proto_goTypes = nil
	file_docker_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DockerAgentClient is the client API for DockerAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DockerAgentClient interface {
	Containers(ctx context.Context, in *ContainersRequest, opts ...grpc.CallOption) (DockerAgent_ContainersClient, error)
	Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (DockerAgent_ImagesClient, error)
	Host(ctx context.Context, in *HostRequest, opts ...grpc.CallOption) (*HostResponse, error)
}

type dockerAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerAgentClient(cc grpc.ClientConnInterface) DockerAgentClient {
	return &dockerAgentClient{cc}
}

func (c *dockerAgentClient) Containers(ctx context.Context, in *ContainersRequest, opts ...grpc.CallOption) (DockerAgent_ContainersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DockerAgent_serviceDesc.Streams[0], "/dockerService.DockerAgent/Containers", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerAgentContainersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DockerAgent_ContainersClient interface {
	Recv() (*ContainersResponse, error)
	grpc.ClientStream
}

type dockerAgentContainersClient struct {
	grpc.ClientStream
}

func (x *dockerAgentContainersClient) Recv() (*ContainersResponse, error) {
	m := new(ContainersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dockerAgentClient) Images(ctx context.Context, in *ImagesRequest, opts ...grpc.CallOption) (DockerAgent_ImagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DockerAgent_serviceDesc.Streams[1], "/dockerService.DockerAgent/Images", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerAgentImagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DockerAgent_ImagesClient interface {
	Recv() (*ImagesResponse, error)
	grpc.ClientStream
}

type dockerAgentImagesClient struct {
	grpc.ClientStream
}

func (x *dockerAgentImagesClient) Recv() (*ImagesResponse, error) {
	m := new(ImagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dockerAgentClient) Host(ctx context.Context, in *HostRequest, opts ...grpc.CallOption) (*HostResponse, error) {
	out := new(HostResponse)
	err := c.cc.Invoke(ctx, "/dockerService.DockerAgent/Host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerAgentServer is the server API for DockerAgent service.
type DockerAgentServer interface {
	Containers(*ContainersRequest, DockerAgent_ContainersServer) error
	Images(*ImagesRequest, DockerAgent_ImagesServer) error
	Host(context.Context, *HostRequest) (*HostResponse, error)
}

// UnimplementedDockerAgentServer can be embedded to have forward compatible implementations.
type UnimplementedDockerAgentServer struct {
}

func (*UnimplementedDockerAgentServer) Containers(*ContainersRequest, DockerAgent_ContainersServer) error {
	return status.Errorf(codes.Unimplemented, "method Containers not implemented")
}
func (*UnimplementedDockerAgentServer) Images(*ImagesRequest, DockerAgent_ImagesServer) error {
	return status.Errorf(codes.Unimplemented, "method Images not implemented")
}
func (*UnimplementedDockerAgentServer) Host(context.Context, *HostRequest) (*HostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Host not implemented")
}

func RegisterDockerAgentServer(s *grpc.Server, srv DockerAgentServer) {
	s.RegisterService(&_DockerAgent_serviceDesc, srv)
}

func _DockerAgent_Containers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DockerAgentServer).Containers(m, &dockerAgentContainersServer{stream})
}

type DockerAgent_ContainersServer interface {
	Send(*ContainersResponse) error
	grpc.ServerStream
}

type dockerAgentContainersServer struct {
	grpc.ServerStream
}

func (x *dockerAgentContainersServer) Send(m *ContainersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DockerAgent_Images_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DockerAgentServer).Images(m, &dockerAgentImagesServer{stream})
}

type DockerAgent_ImagesServer interface {
	Send(*ImagesResponse) error
	grpc.ServerStream
}

type dockerAgentImagesServer struct {
	grpc.ServerStream
}

func (x *dockerAgentImagesServer) Send(m *ImagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DockerAgent_Host_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerAgentServer).Host(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dockerService.DockerAgent/Host",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerAgentServer).Host(ctx, req.(*HostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DockerAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dockerService.DockerAgent",
	HandlerType: (*DockerAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Host",
			Handler:    _DockerAgent_Host_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Containers",
			Handler:       _DockerAgent_Containers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Images",
			Handler:       _DockerAgent_Images_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "docker_service.proto",
}
